name: Application CD Pipeline

on:
  push:
    branches: [ dev, staging, main ]
    paths-ignore:
      - '.github/workflows/app-ci.yml'
      - '.github/dependabot.yml'
      - '*.md'
      - 'docs/**'

permissions:
  id-token: write
  contents: read

env:
  ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
  AWS_REGION: eu-west-1
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_TASK_FAMILY: ${{ secrets.ECS_FAMILY }}

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get Image Tag
        id: image
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          SHA_SHORT=$(git rev-parse --short HEAD)
          echo "tag=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${PR_NUMBER}-${SHA_SHORT}" >> $GITHUB_OUTPUT

      - name: Verify Image Exists
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          SHA_SHORT=$(git rev-parse --short HEAD)
          if ! aws ecr describe-images \
            --repository-name ${{ env.ECR_REPO }} \
            --image-ids imageTag=${PR_NUMBER}-${SHA_SHORT} >/dev/null 2>&1; then
            echo "Error: Required image not found in ECR"
            echo "Image: ${{ steps.image.outputs.tag }}"
            exit 1
          fi
          echo "✅ Image verified in ECR"

      - name: Download Current Task Definition
        run: |
          TASK_FAMILY="${{ secrets.ECS_FAMILY }}"
          aws ecs describe-task-definition \
            --task-definition $TASK_FAMILY \
            --query 'taskDefinition' \
            --output json > task-definition.json
          echo "task-family=$TASK_FAMILY" >> $GITHUB_OUTPUT

      - name: Store Current Task Definition for Rollback
        id: current-task
        run: |
          CURRENT_TASKDEF_ARN=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].taskDefinition' \
            --output text)
          echo "arn=$CURRENT_TASKDEF_ARN" >> $GITHUB_OUTPUT

      - name: Update Task Definition
        id: task-def
        run: |
          # Read the task definition
          TASKDEF_CONTENT=$(cat task-definition.json)
          
          # Update container image
          NEW_TASKDEF=$(echo "$TASKDEF_CONTENT" | jq --arg IMAGE "${{ steps.image.outputs.tag }}" \
            '.containerDefinitions[0].image = $IMAGE')
          
          # Remove fields that shouldn't be included in register-task-definition
          NEW_TASKDEF=$(echo "$NEW_TASKDEF" | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          
          # Save the new task definition
          echo "$NEW_TASKDEF" > new-task-definition.json
          
          # Register new task definition
          NEW_TASKDEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json "file://new-task-definition.json" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "arn=$NEW_TASKDEF_ARN" >> $GITHUB_OUTPUT

      - name: Deploy to ECS
        id: deploy
        run: |
          echo "Updating ECS service with new task definition..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.task-def.outputs.arn }} \
            --force-new-deployment

          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}

      - name: Verify Deployment
        run: |
          echo "Verifying deployment status..."
          DEPLOY_STATUS=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].deployments[0].status' \
            --output text)
          
          if [ "$DEPLOY_STATUS" != "PRIMARY" ]; then
            echo "Deployment failed: Service not stable"
            aws ecs describe-services \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services ${{ env.ECS_SERVICE }} \
              --query 'services[0].events[0:5]' \
              --output text
            exit 1
          fi
          
          RUNNING_COUNT=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].runningCount' \
            --output text)
          
          DESIRED_COUNT=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].desiredCount' \
            --output text)
          
          if [ "$RUNNING_COUNT" -lt "$DESIRED_COUNT" ]; then
            echo "Deployment failed: Not all tasks are running"
            echo "Running: $RUNNING_COUNT, Desired: $DESIRED_COUNT"
            exit 1
          fi
          
          echo "✅ Deployment successful!"

      - name: Rollback on Failure
        if: failure() && steps.deploy.outcome == 'failure'
        run: |
          echo "Deployment failed, rolling back to previous task definition..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.current-task.outputs.arn }} \
            --force-new-deployment

          if ! aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}; then
            echo "Error: Rollback failed to stabilize"
            exit 1
          fi
          echo "✅ Rollback successful"

      - name: Notify Status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          text: |
            Deployment to ${{ github.ref_name }} environment ${{ job.status }}!
            Image: ${{ steps.image.outputs.tag }}
            Task Definition: ${{ steps.task-def.outputs.arn }}
            ${{ job.status == 'failure' && steps.deploy.outcome == 'failure' && '⚠️ Deployment failed - Rolled back to previous version' || '' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
