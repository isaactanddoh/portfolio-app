name: Application CD Pipeline

on:
  push:
    branches: [ dev, staging, main ]
    paths:
      - '**'
      - '!.github/dependabot.yml'
      - '!.github/workflows/app-ci.yml'
      
permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    environment:
      name: ${{ github.ref_name }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: eu-west-1

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Generate Image Tags
        id: tags
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          GIT_SHA=$(git rev-parse --short HEAD)
          ENVIRONMENT="${{ github.ref_name }}"
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "gitsha=$GIT_SHA" >> $GITHUB_OUTPUT
          echo "tags=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO }}:$ENVIRONMENT-$GIT_SHA-$TIMESTAMP" >> $GITHUB_OUTPUT
      
      - name: Build Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          load: true
          tags: ${{ steps.tags.outputs.tags }}
          no-cache: true

      - name: Scan Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.tags.outputs.tags }}
          format: 'table'
          output: 'trivy-results.json'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Search for Trivy Results
        run: |
          find . -name "trivy-results.json"

      - name: Upload Trivy Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: |
            trivy-results.json

      - name: Upload Trivy Results to S3
        run: |
          REPORT_DIR="reports/${{ github.repository }}/${{ github.ref_name }}/${{ github.sha }}"
          aws s3 cp trivy-results.json "s3://${{ secrets.REPORTS_BUCKET }}/$REPORT_DIR/"

      - name: Push Image
        run: docker push ${{ steps.tags.outputs.tags }}
        
      - name: Update ECS Task Definition
        id: update-task
        run: |
          # Get current task definition
          TASK_FAMILY="${{ secrets.TASK_FAMILY }}"
          TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY --query 'taskDefinition.containerDefinitions' --output json)
          
          # Update container image
          NEW_TASK_DEF=$(echo $TASK_DEF | jq --arg IMAGE "${{ steps.tags.outputs.tags }}" '.containerDefinitions[0].image = $IMAGE')
          
          # Register new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --family $TASK_FAMILY \
            --cli-input-json "$NEW_TASK_DEF" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
            
          echo "task_def_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT
          
      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --task-definition ${{ steps.update-task.outputs.task_def_arn }} \
            --force-new-deployment

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          text: "Deployment to ${{ github.ref_name }} environment ${{ job.status }}!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}