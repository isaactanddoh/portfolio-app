name: Application CI Pipeline

on:
  pull_request:
    branches: [ dev, staging, main ]
    paths:
      - '**'
      - .github/workflows/app-ci.yml
      - package*.json
      - sonar-project.properties
      - '!Dockerfile'
      - '!.github/dependabot.yml'
      - '!.github/workflows/app-cd.yml'

permissions:
  id-token: write
  contents: read

jobs:
  security-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: . # Set the working directory to app folder
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      # Explicitly handle npm caching
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: |
          npm install npm-force-resolutions --save-dev
          npm install


      - name: Run npm audit
        run: |
          npm audit --json > npm-audit-report.json || true
          npm audit fix --audit-level=critical --force
          if [ $(jq '.vulnerabilities | length' npm-audit-report.json) -gt 0 ]; then
            echo "Critical vulnerabilities found:"
            jq '.vulnerabilities[] | select(.severity=="critical")' npm-audit-report.json
            exit 1
          fi
        
      - name: Run Tests with Coverage
        run: |
          npm run test:coverage
        
      - name: Run SAST with SonarCloud
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: app
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.exclusions=**/node_modules/**,**/coverage/**,**/public/**
            -Dsonar.coverage.exclusions=**/public/**
            -Dsonar.verbose=true
        
      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=app/package.json
          
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'portfolio-app'
          path: 'app'
          format: 'HTML'
          out: 'reports'  # Specify output directory

      - name: Run Integration Tests
        run: npm run test:integration

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            ${{ github.workspace }}/npm-audit-report.json
            ${{ github.workspace }}/reports/dependency-check-report.html

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: eu-west-1

      - name: Upload Reports to S3
        run: |
          REPORT_DIR="reports/${{ github.repository }}/${{ github.ref_name }}/${{ github.sha }}"
          aws s3 cp ${{ github.workspace }}/npm-audit-report.json "s3://${{ secrets.REPORTS_BUCKET }}/$REPORT_DIR/"
          aws s3 cp ${{ github.workspace }}/reports/dependency-check-report.html "s3://${{ secrets.REPORTS_BUCKET }}/$REPORT_DIR/"

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          text: |
            Security Scan for PR #${{ github.event.pull_request.number }} ${{ job.status }}!
            Branch: ${{ github.head_ref }}
            Reports: s3://${{ secrets.REPORTS_BUCKET }}/${{ github.repository }}/${{ github.ref_name }}/${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}