name: Application CI Pipeline

on:
  pull_request:
    branches: [ dev, staging, main ]
    paths-ignore:
      - '.github/workflows/app-cd.yml'
      - '.github/dependabot.yml'
      - '*.md'
      - 'docs/**'

permissions:
  id-token: write
  contents: read
  security-events: write
  pull-requests: read
  actions: read
  checks: write

env:
  ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
  AWS_REGION: eu-west-1

jobs:
  security-compliance:
    name: Security & Compliance Checks
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm install npm-force-resolutions --save-dev
          npm install -g snyk

      - name: Run SAST with SonarCloud
        uses: SonarSource/sonarcloud-github-action@v2.1.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.coverage.exclusions=tests/**,**/*.test.*
            -Dsonar.exclusions=node_modules/**

      - name: Run NPM Audit
        run: |
          npm audit --json > npm-audit.json || true
          npm audit fix --audit-level=critical --force || true

      - name: Run Snyk Security Scan
        run: |
          snyk test --json > snyk-results.json || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'portfolio-app'
          path: '.'
          format: 'HTML'
          out: 'reports'


      - name: Run Integration Tests
        run: npm run test:integration

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: eu-west-1

      - name: Upload Reports to S3
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPORT_PATH="security-reports/pr-${PR_NUMBER}/${TIMESTAMP}"
          
          # Upload all reports
          aws s3 cp npm-audit.json "s3://${{ secrets.REPORTS_BUCKET }}/${REPORT_PATH}/"
          aws s3 cp snyk-results.json "s3://${{ secrets.REPORTS_BUCKET }}/${REPORT_PATH}/"
          aws s3 cp reports/dependency-check-report.html "s3://${{ secrets.REPORTS_BUCKET }}/${REPORT_PATH}/"
          
          # Create report summary
          echo "Security Reports Summary for PR #${PR_NUMBER}" > report-summary.md
          echo "Report Location: s3://${{ secrets.REPORTS_BUCKET }}/${REPORT_PATH}" >> report-summary.md
          echo "Generated at: $(date)" >> report-summary.md

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            npm-audit.json
            snyk-results.json
            reports/
            report-summary.md

  build-and-scan:
    name: Build & Scan Image
    needs: security-compliance
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate Image Tags
        id: tags
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          SHA_SHORT=$(git rev-parse --short HEAD)
          
          # Generate unique tags
          echo "sha_tag=${SHA_SHORT}" >> $GITHUB_OUTPUT
          echo "pr_tag=pr-${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "tags=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${PR_NUMBER}-${SHA_SHORT}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: ${{ steps.tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.tags.outputs.tags }}
          format: 'table'
          output: 'trivy-results.json'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.json'
          category: 'Trivy Container Scan'

      - name: Push Images to ECR
        if: success()
        run: |
          docker push ${{ steps.tags.outputs.tags }}

      - name: Notify on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          text: |
            CI Pipeline failed for PR #${{ github.event.pull_request.number }}
            Branch: ${{ github.head_ref }}
            Commit: ${{ github.sha }}
            Please check the logs for more details.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
